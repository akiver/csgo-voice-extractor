name: Publish new release

on:
  workflow_dispatch:
    inputs:
      release-type:
        type: choice
        description: Select the release type
        required: true
        options:
          - patch
          - minor
          - major

jobs:
  ensure-changes:
    name: Ensure there are changes
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to get all existing tags
          fetch-tags: true

      - name: Stop if there are no new changes
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 --always)
          LAST_COMMIT=$(git rev-parse HEAD)
          LASTEST_TAG_COMMIT=$(git rev-list -n 1 $LATEST_TAG)
          if [ "$LASTEST_TAG_COMMIT" == "$LAST_COMMIT" ]; then
            echo "No new changes since the last tag. Stopping the workflow."
            exit 1
          fi
          exit 0

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    needs: ensure-changes

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install deps
        # The x86_64 version is installed in /usr/local/bin/brew
        # We could remove the 2 commands that use shellenv and invoke brew like this:
        # arch -x86_64 /usr/local/bin/brew xxx
        run: |
          export HOMEBREW_NO_AUTO_UPDATE=1
          export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
          /usr/sbin/softwareupdate --install-rosetta --agree-to-license
          arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          (echo; echo 'eval "$(/usr/local/bin/brew shellenv)"') >> /Users/runner/.bash_profile
          eval "$(/usr/local/bin/brew shellenv)"
          arch -x86_64 brew install opus
          arch -x86_64 brew install pkg-config
          OPUS_VERSION=$(arch -x86_64 brew info --json opus | jq -r '.[].versions.stable')
          cp /usr/local/Cellar/opus/$OPUS_VERSION/lib/libopus.0.dylib dist/bin/darwin-x64

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Build
        run: |
          make build-darwin
          cd dist/bin
          zip -r darwin-x64.zip darwin-x64

      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: darwin-x64
          path: dist/bin/darwin-x64.zip

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: ensure-changes

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt install pkg-config libopus-dev
          cp /usr/lib/x86_64-linux-gnu/libopus.so.0 dist/bin/linux-x64

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Build
        run: |
          make build-linux
          cd dist/bin
          zip -r linux-x64.zip linux-x64

      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64
          path: dist/bin/linux-x64.zip

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: ensure-changes

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - uses: msys2/setup-msys2@v2
        id: msys2
        with:
          msystem: MINGW32
          install: >-
            mingw-w64-i686-gcc
            mingw-w64-i686-pkg-config
            make

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Install deps
        run: |
          choco install zip

      - name: Build Opus
        run: |
          git clone https://github.com/xiph/opus
          cd opus
          git fetch --tags
          git checkout tags/v1.5.2
          mkdir build
          cd build
          cmake -G "Visual Studio 17 2022" -A Win32 -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS=ON ..
          msbuild opus.sln /p:Configuration=Release /p:Platform=Win32
          cmake --build . --config Release
          cd ${{ github.workspace }}
          cp opus.pc.example opus.pc
          sed -i 's|^prefix=.*|prefix=${{ github.workspace }}/opus|' opus.pc

      - name: Build
        run: |
          cp opus/build/Release/opus.dll dist/bin/win32-x64
          make build-windows
        env:
          PATH: ${{ steps.msys2.outputs.msys2-location }}/mingw32/bin;${{ steps.msys2.outputs.msys2-location }}/usr/bin;${{ env.PATH }}
          CPATH: ${{ github.workspace }}/opus/include
          LIBRARY_PATH: ${{ github.workspace }}/opus/build/Release

      - name: Create archive
        run: |
          cd dist/bin
          zip -r win32-x64.zip win32-x64

      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: win32-x64
          path: dist/bin/win32-x64.zip

  publish:
    name: Publish release
    runs-on: ubuntu-latest
    needs: [build-macos, build-linux, build-windows]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to get all existing tags
          fetch-tags: true

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          registry-url: "https://registry.npmjs.org"

      - name: Bump version
        run: |
          git config --global user.name "AkiVer"
          git config --global user.email ${{ secrets.NPM_EMAIL }}
          npm version ${{ github.event.inputs.release-type }} --no-git-tag-version --tag-version-prefix="" | awk '{print $$NF}' > /tmp/NEW_VERSION
          git add package.json
          git commit -m "chore: version $(cat /tmp/NEW_VERSION)"
          git tag "v$(cat /tmp/NEW_VERSION)"

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Extract and copy artifacts for NPM
        run: |
          mkdir -p dist/bin
          unzip -o darwin-x64/darwin-x64.zip -d dist/bin
          unzip -o linux-x64/linux-x64.zip -d dist/bin
          unzip -o win32-x64/win32-x64.zip -d dist/bin

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: |
            darwin-x64/darwin-x64.zip
            linux-x64/linux-x64.zip
            win32-x64/win32-x64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push changes
        run: |
          git config --global user.name "AkiVer"
          git config --global user.email ${{ secrets.NPM_EMAIL }}
          npm publish --access public
          git push origin main --tags
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
